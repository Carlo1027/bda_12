y<- c(4,5,6)
z<- c(7,8,9)
A<- cbind(x,y,z)
names(A)[1] <-"Enero"
names(A)[2]<-"Febrero"
names(A)[3]<-"Marzo"
View(A)
is.matrix(A)
X
X
X<- 1:3
X
Y<-3:5
Y
Z
X<- 1:3
X
Y<-4:6
Y
Z<-7:9
Z
A
A
row.names(A)<- ("ENERO","FEBRERO","MARZO")
A
X<- 1:3
X
Y<-4:6
Y
Z<-7:9
Z
A<-rbind(X,Y,Z)
A
row.names(A)<- ("ENERO","FEBRERO","MARZO")
A
row.names(A)<- (X="ENERO",Y="FEBRERO",Z="MARZO")
A
row.names(A)<- (X="ENERO",Y="FEBRERO",Z="MARZO")
X<- 1:3
X
Y<-4:6
Y
Z<-7:9
Z
A<-rbind(X,Y,Z)
A
X<- 1:3
X
Y<-4:6
Y
Z<-7:9
Z
A<-cbind(X,Y,Z)
A
X<- 1:3
X
Y<-4:6
Y
Z<-7:9
Z
A<-cbind(X,Y,Z)
A
rownames(A) <- c("Enero", "Febrero", "Marzo")
A
is.matrix(A)
Z<- runif(12,min = 0,max = 1000)
Z
B<-matrix(z,nrow = 4,ncol = 3)
B<-matrix(Z,nrow = 4,ncol = 3)
Z
B
rownames(B) <- c("a", "b", "c","d")
colnames(B) <- c("x", "y", "z")
B
#PREGUNTA 1
X<- 1:3
#PREGUNTA 1
X<- 1:3
Y<-4:6
Z<-7:9
A<-cbind(X,Y,Z)
A
rownames(A) <- c("Enero", "Febrero", "Marzo")
is.matrix(A)
#PREGUTA 2
Z<- runif(12,min = 0,max = 1000)
B<-matrix(Z,nrow = 4,ncol = 3)
rownames(B) <- c("a", "b", "c","d")
colnames(B) <- c("x", "y", "z")
B
#PREGUNTA 1
X<- 1:3
Y<-4:6
Z<-7:9
A<-cbind(X,Y,Z)
A
rownames(A) <- c("Enero", "Febrero", "Marzo")
is.matrix(A)
#PREGUTA 2
Z<- runif(12,min = 0,max = 1000)
B<-matrix(Z,nrow = 4,ncol = 3)
rownames(B) <- c("a", "b", "c","d")
colnames(B) <- c("x", "y", "z")
B
t(B)
t(B)<-t(B)
tB<-t(B)
tB
#PREGUTA 5
B%%tB
#PREGUTA 5
B%tB
#PREGUTA 5
tB%B
#PREGUTA 5
tB%%B
#PREGUTA 5
tB*B
#PREGUTA 5
B*tB
#PREGUTA 5
tB*tB
tB
#PREGUTA 5
tB%%tB
#PREGUTA 5
tB*tB
df_A<-as.data.frame(A)
my.dataframe$new.col<[π,π*π,π*π*π]
my.dataframe$new.col<π,π*π,π*π*π
w<-[π,π*π,π*π*π]
w<-c(π,π*π,π*π*π)
w<-c(pi,pi*pi,pi*pi*pi)
w
my.dataframe$new.col< a.w
df_A$new.col< a.w
df_A$new.col<-w
df_A
df_A$W<-w
df_A
df_A$w<-w
df_A
#PREGUNTA 1
X<- 1:3
Y<-4:6
Z<-7:9
A<-cbind(X,Y,Z)
A
rownames(A) <- c("Enero", "Febrero", "Marzo")
is.matrix(A)
#PREGUTA 3
Z<- runif(12,min = 0,max = 1000)
B<-matrix(Z,nrow = 4,ncol = 3)
rownames(B) <- c("a", "b", "c","d")
colnames(B) <- c("x", "y", "z")
B
#PREGUTA 4
tB<-t(B)
tB
#PREGUTA 5
tB*tB
#PREGUNTA 6
df_A<-as.data.frame(A)
w<-c(pi,pi*pi,pi*pi*pi)
df_A$w<-w
df_A
View(df_A)
set.seed(75)
aMat <− matrix(sample ( 1 0 , size =60 , replace=T) , nr =6)
set.seed(75)
aMat <− matrix(sample ( 10 , size =60 , replace=T) , nr =6)
aMat
View(A)
mean
?mean
help
help
help.start()
help(package="ggplot2")
str(irs)
str(iris)
class(iris)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
# definivion de variables
x= 5
y = 7
c = paste(a, " ",b)
c = paste(a," ",b)
a= "Arriba"
b= "Perú"
c = paste(a," ",b)
a= "Arriba"
b= "Perú"
c = paste(a," ",b)
str(a)
notas= c(18,15,13)
x= seq(1:10)
x
notas= c(18,15,13)
x= seq(1,10)
x
y= seq(1,10, by = 2)
y= seq(1,10, by = 2)
z= rep(1:0, times=4)
notas= c(18,15,13)
x= seq(1,10)
x
y= seq(1,10, by = 2)
z= rep(1:0, times=4)
v= C(notas, xyz, c(1,2,3))
notas= c(18,15,13)
x= seq(1,10)
x
y= seq(1,10, by = 2)
z= rep(1:0, times=4)
v= C(notas, x,y,z, c(1,2,3))
notas= c(18,15,13)
x= seq(1,10)
x
y= seq(1,10, by = 2)
z= rep(1:0, times=4)
v= C(notas, x,y,z,w, c(1,2,5))
notas= c(18,15,13)
x= seq(1,10)
x
y= seq(1,10, by = 2)
z= rep(1:0, times=4)
v= c(notas, x,y,z,w, c(1,2,5))
notas= c(18,15,13)
x= seq(1,10)
x
y= seq(1,10, by = 2)
z= rep(1:0, times=4)
w=rep(1:0,each=4)
v= c(notas, x,y,z,w, c(1,2,5))
ls()
rm(list = c("w","x","y"))
#metodos de los vectores
x = table(v)
x
notas= c(18,15,13)
x= seq(1,10)
x
y= seq(1,10, by = 2)
z= rep(1:0, times=4)
w=rep(1:0,each=4)
v= c(notas, x,y,z,w, c(1,2,5))
x = table(v)
x
ls()
rm(list = c("w","x","y"))
x = table(v)
x
ls()
rm(list = c("w","x","y"))
rm(x)
x = table(v)
x
y= short(v)
y= short(x)
y= sort(v)
y
notas[2]
notas = c(notas, 20,7,12,5)
notas[2]
length(notas)
notas[notas>10]
aprobados = notas[notas>10]
aprobados
x=c(seq(1,3), rep(1,times=3), c(8,7,6))
m
m = matrix(x,nrow=3, ncol=3)
m = matrix(x,nrow=3, ncol=3)
m
mm = matrix(x,nrow=3, ncol=3, byrow = TRUE)
mm
m[,c(1,3)]
m
m = matrix(x,nrow=3, ncol=3)
m
mm = matrix(x,nrow=3, ncol=3, byrow = TRUE)
mm
#seleccion de elementos
m[,c(1,3)]
m
m[,c(1,3)]
m
m
m = matrix(x,nrow=3, ncol=3)
x=c(seq(1,3), rep(1,times=3), c(8,7,6))
m = matrix(x,nrow=3, ncol=3)
m
mm = matrix(x,nrow=3, ncol=3, byrow = TRUE)
mm
#seleccion de elementos
m[,c(1,3)]
m
l= list(x= notas, p1= table(notas), p2= aprobados,
p3 = min(notas))
notas
notas[2]
notas = c(notas, 20,7,12,5)
notas[2]
length(notas)
aprobados = notas[notas>10]
aprobados
#matrices
x=c(seq(1,3), rep(1,times=3), c(8,7,6))
m = matrix(x,nrow=3, ncol=3)
m
mm = matrix(x,nrow=3, ncol=3, byrow = TRUE)
mm
#seleccion de elementos
m[,c(1,3)]
m
#Listas
l= list(x= notas, p1= table(notas), p2= aprobados,
p3 = min(notas))
notas= c(18,15,13)
x= seq(1,10)
x
y= seq(1,10, by = 2)
z= rep(1:0, times=4)
w=rep(1:0,each=4)
v= c(notas, x,y,z,w, c(1,2,5))
#liberar memoria
ls()
rm(list = c("w","x","y"))
#metodos de los vectores
rm(x)
x = table(v)
y= sort(v)
y
#Seleccion de elementos d e un vector
notas
notas[2]
notas = c(notas, 20,7,12,5)
notas[2]
length(notas)
aprobados = notas[notas>10]
aprobados
#matrices
x=c(seq(1,3), rep(1,times=3), c(8,7,6))
m = matrix(x,nrow=3, ncol=3)
m
mm = matrix(x,nrow=3, ncol=3, byrow = TRUE)
mm
#seleccion de elementos
m[,c(1,3)]
m
#Listas
l= list(x= notas, p1= table(notas), p2= aprobados,
p3 = min(notas))
l
r= l[c("p1", "p2", "p3")]
r$p3
r$p2
genero= c(,0,0,0,0,1,1,1,0,1,0,4,0,1,0,1,0,1,0,0,1)
genero.factor = as.factor(genero)
genero.factor
genero= c(0,0,0,0,1,1,1,0,1,0,4,0,1,0,1,0,1,0,0,1)
genero.factor = as.factor(genero)
genero.factor
levels(genero.factor)=c("M","F")
genero= c(0,0,0,0,1,1,1,0,1,0,4,0,1,0,1,0,1,0,0,1)
genero.factor = as.factor(genero)
genero.factor
levels(genero.factor)=c("M","F")
levels(genero.factor)=c("M","F")
df = data.frame(x= seq(1,6), y= rep(7,6), z= c(10,11))
df
df = data.frame(x= seq(1,6), y= rep(7,6), z= c(10,11))
df
View(df)
head(df,n=4)
df$x
df[c("x","z")]
View(df)
setwd("D:/bda_12")
load(file = "clase_06/Modelo_Total/df_desa_F.Rdata")
summary(df.desa.F)
df.desa.F$CreditScore <- ifelse( df.desa.F$CreditScore < qa, qa, df.desa.F$CreditScore)
#import data
load(file = "clase_04/df_desa.Rdata")
colnames(df.desa)
df.desa.F = df.desa
#CreditScore
#========================
# TRATAMIENTO DE COTAS INF
#========================
qa <- quantile(df.desa.F$CreditScore, probs = 0.01) # empiezo en 0.01 y se va subiendo
qa #432.86 p1
#x <- ifelse( df.desa.F$CreditScore < qa, qa, df.desa.F$CreditScore)
#boxplot(x)
df.desa.F$CreditScore <- ifelse( df.desa.F$CreditScore < qa, qa, df.desa.F$CreditScore)
#Geography
#Gender
#Age
#========================
# TRATAMIENTO DE COTAS SUP
#========================
qa <- quantile(df.desa.F$Age, probs = 0.96) # empiezo en 0.99 y se va bajando
qa #62 p96
#x <- ifelse( df.desa.F$Age > qa, qa, df.desa.F$Age)
#boxplot(x)
df.desa.F$Age <- ifelse( df.desa.F$Age > qa, qa, df.desa.F$Age)
#Tenure
#Balance
#df.desa.F$Balance<- log2(df.desa.F$Balance)
#hist(df.desa.F$Balance)
#NumOfProducts
#========================
# TRATAMIENTO DE COTAS SUP
#========================
qa <- quantile(df.desa.F$NumOfProducts, probs = 0.99) # empiezo en 0.99 y se va bajando
qa #3 p99
#x <- ifelse( df.desa.F$NumOfProducts > qa, qa, df.desa.F$NumOfProducts)
#boxplot(x)
df.desa.F$NumOfProducts <- ifelse( df.desa.F$NumOfProducts > qa, qa, df.desa.F$NumOfProducts)
#HasCrCard
#IsActiveMember
#EstimatedSalary
#========================
# TRATAMIENTO DE MISSINGS
#========================
df.desa.F$EstimatedSalary <- ifelse( is.na(df.desa.F$EstimatedSalary),
mean(df.desa.F$EstimatedSalary, na.rm = TRUE), #100001.1
df.desa.F$EstimatedSalary)
save(df.desa.F, file = "clase_05/df_desa_F.Rdata")
load(file = "clase_06/Modelo_Total/df_desa_F.Rdata")
summary(df.desa.F)
#levantamos la data tratada
load(file="clase_05/df_desa_F.Rdata")
#Segmentacion por Geografia
df.desa.F.FS <- subset(df.desa.F,
select = c("CreditScore","Gender",
"Age","Tenure",
"Balance","NumOfProducts",
"HasCrCard","IsActiveMember",
"EstimatedSalary","Exited"),
subset = df.desa.F$Geography != "Germany"
)
df.desa.F.G <- subset(df.desa.F,
select = c("CreditScore","Gender",
"Age","Tenure",
"Balance","NumOfProducts",
"HasCrCard","IsActiveMember",
"EstimatedSalary","Exited"),
subset = df.desa.F$Geography == "Germany"
)
save(df.desa.F.FS, file = "clase_05/df_desa_F_FS.Rdata")
save(df.desa.F.G, file = "clase_05/df_desa_F_G.Rdata")
load(file = "clase_06/Modelo_Total/df_desa_F.Rdata")
summary(df.desa.F)
install.packages("caTools")
install.packages("caTools")
load(file = "clase_06/Modelo_Total/df_desa_F.Rdata")
summary(df.desa.F)
install.packages("caTools")
set.seed(123)
split -> sample.split(df.desa.F$Exited, SplitRatio = 0.7)
df.desa.F.train -> subset(df.desa.F, split == TRUE)
df.desa.F.test -> subset(df.desa.F, split == FALSE)
set.seed(123)
split = sample.split(df.desa.F$Exited, SplitRatio = 0.7)
df.desa.F.train = subset(df.desa.F, split == TRUE)
df.desa.F.test = subset(df.desa.F, split == FALSE)
load(file = "clase_06/Modelo_Total/df_desa_F.Rdata")
library(caTools)
set.seed(123)
split <- sample.split(df.desa.F$Exited, SplitRatio = 0.7)
df.desa.F.train <- subset(df.desa.F, split == TRUE)
df.desa.F.test <- subset(df.desa.F, split == FALSE)
library(rpart)
modelo <- rpart(formula = Exited ~ . ,
data = df.desa.F.train,
method = "class")
str(modelo)
summary(modelo)
print(arbol)
print(modelo)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(modelo)
summary(modelo)
colnames(df.desa.F.train)
modelo1 <- rpart(formula = Exited ~ CreditScore
+ Gender
+ Age
+ Tenure
+ Balance
+ NumOfProducts
+ HasCrCard
+ IsActiveMember
+ EstimatedSalary,
data = df.desa.F.train,
method = "class")
rpart.plot(modelo1)
summary(modelo1)
cm <- table
View(cm)
y_pred <- predict(object = modelo, newdata = df.desa.F.test, type = "class")
cm <- table(y_pred, df.desa.F.test$Exited)
cm
(2236 + 215) / 2876
y_pred <- predict(object = modelo1, newdata = df.desa.F.test, type = "class")
cm <- table(y_pred, df.desa.F.test$Exited)
cm #Exito : (2236 + 215) / 2876 = 0.8522253
(2242 + 188) / 2876
